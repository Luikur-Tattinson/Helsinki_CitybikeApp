@model BikeApp.Models.KeyModel

@{
    ViewData["Title"] = "Home Page";
}

<div id="map" style="height: 400px; width: 100%;"></div>

<table class="table">
    <thead>
        <tr>
            <th>Nimi</th>
            <th>Kaupunki</th>
            <!-- Add more columns as needed -->
        </tr>
    </thead>
    <tbody>
        @foreach (var station in Model.Stations)
        {
            <tr>
                <td>@station.Nimi</td>
                <td>@station.Kaupunki</td>
                <!-- Add more columns as needed -->
            </tr>
        }
    </tbody>
</table>

<div>
    @if (Model.Pagination != null && Model.Pagination.TotalPages > 1)
    {
        <nav>
            <ul class="pagination">
                @{
                    int totalPages = Model.Pagination.TotalPages;
                    int currentPage = Model.Pagination.CurrentPage;
                    int startPage = Math.Max(1, currentPage - 2);
                    int endPage = Math.Min(totalPages, currentPage + 2);

                    if (startPage > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" href="/Home/Index?page=1">First</a>
                        </li>
                    }

                    if (currentPage > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" href="/Home/Index?page=@(currentPage - 1)">Previous</a>
                        </li>
                    }

                    for (int i = startPage; i <= endPage; i++)
                    {
                        if (i == currentPage)
                        {
                            <li class="page-item active">
                                <span class="page-link">@i</span>
                            </li>
                        }
                        else
                        {
                            <li class="page-item">
                                <a class="page-link" href="/Home/Index?page=@i">@i</a>
                            </li>
                        }
                    }

                    if (currentPage < totalPages)
                    {
                        <li class="page-item">
                            <a class="page-link" href="/Home/Index?page=@(currentPage + 1)">Next</a>
                        </li>
                    }

                    if (endPage < totalPages)
                    {
                        <li class="page-item">
                            <a class="page-link" href="/Home/Index?page=@totalPages">Last</a>
                        </li>
                    }
                }
            </ul>
        </nav>
    }
</div>

<script>
    function initMap() {
        var options = {
            zoom: 12,
            center: { lat: 60.19193, lng: 24.91967 }
        };

        var map = new google.maps.Map(document.getElementById('map'), options);
        var infoWindow = new google.maps.InfoWindow();

        var openInfoWindow = null;

    @if (Model.AllStations != null && Model.AllStations.Count > 0)
    {
        @foreach (var station in Model.AllStations)
        {
            <text>
                                var lng = parseFloat('@station.X'.replace(',', '.'));
                var lat = parseFloat('@station.Y'.replace(',', '.'));

                if (!isNaN(lat) && !isNaN(lng)) {
                    var marker = new google.maps.Marker({
                        position: { lat: lat, lng: lng },
                        map: map
                    });

                    var content = '<div><h3>' + '@station.Nimi' + '</h3>' +
                        '<p><strong>' + '@station.Namn' + '</strong></p>' +
                        '<p>' + 'Osoite: ' + '@station.Osoite' + '</p>' +
                        '<p>' + 'Kaupunki: ' + '@station.Kaupunki' + '</p>' +
                        '<p>' + 'Operaattori: ' + '@station.Operaattor' + '</p>' +
                        '<p>' + 'Kapasiteetti: ' + '@station.Kapasiteet' + '</p></div>';

                    addMarkerListener(marker, content);
                }
            </text>
        }
    }

            function addMarkerListener(marker, content) {
                marker.addListener('click', function () {
                    if (openInfoWindow) {
                        openInfoWindow.close();
                    }

                    infoWindow.setContent(content);
                    infoWindow.open(map, marker);
                    openInfoWindow = infoWindow;
                });
            }
    }

    function loadGoogleMaps() {
        var script = document.createElement('script');
        script.src = 'https://maps.googleapis.com/maps/api/js?key=@Model?.Key&callback=initMap';
        document.head.appendChild(script);
    }

    window.addEventListener('load', loadGoogleMaps);
</script>

