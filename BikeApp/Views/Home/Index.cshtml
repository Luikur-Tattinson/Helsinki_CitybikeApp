@model BikeApp.Models.KeyModel

@{
    ViewData["Title"] = "Home Page";
    string orderBy = ViewContext.HttpContext.Request.Query["orderBy"].FirstOrDefault();
    string sortOrder = ViewContext.HttpContext.Request.Query["sortOrder"].FirstOrDefault();
    string search = ViewContext.HttpContext.Request.Query["search"].FirstOrDefault();
}
<!DOCTYPE html>
<head>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/BikeApp.styles.css" asp-append-version="true" />
</head>
<body>
<h1>Stations</h1>

<div id="map" style="height: 400px; width: 100%;"></div>

<form action="/Home/Index" method="get" class="mb-3 mt-3" id="srchbar">
    <div class="input-group">
        <input type="text" class="form-control" name="search" value="@search" placeholder="Search stations">
        <div class="input-group-append">
            <button type="submit" class="btn btn-primary">Search</button>
        </div>
    </div>
</form>

<div class="table-container">
<table>
            <thead class="table-box">
        <tr>
            <th>
                <a href="?orderBy=Nimi&amp;sortOrder=@(Model.SortOrderFor("Nimi"))">Nimi</a></th>
            <th>
                <a href="?orderBy=Osoite&amp;sortOrder=@(Model.SortOrderFor("Osoite"))">Osoite</a>
            </th>
            <th>
                <a href="?orderBy=Kaupunki&amp;sortOrder=@Model.SortOrderFor("Kaupunki")">Kaupunki</a>
            </th>
            <th>
                <a href="?orderBy=Kapasiteet&amp;sortOrder=@(Model.SortOrderFor("Kapasiteet"))">Kapasiteetti</a>
            </th>
            <!-- Add more columns as needed -->
        </tr>
    </thead>

    <tbody>
        @foreach (var station in Model.Stations)
        {
            <tr>
                <td class="table-box">@station.Nimi</td>
                <td class="table-box">@station.Osoite</td>
                <td class="table-box">@station.Kaupunki</td>
                <td class="table-box">@station.Kapasiteet</td>
            </tr>
        }
    </tbody>
</table>
</div>

    <div class="pagination-container">
        @if (Model.Pagination != null && Model.Pagination.TotalPages > 1)
        {
            <nav>
                <ul class="pagination">
                    @{
                        int totalPages = Model.Pagination.TotalPages;
                        int currentPage = Model.Pagination.CurrentPage;
                        int visiblePages = 5;
                        int halfVisible = visiblePages / 2;
                        int startPage = Math.Max(1, currentPage - halfVisible);
                        int endPage = Math.Min(totalPages, startPage + visiblePages - 1);

                        if (endPage - startPage + 1 < visiblePages)
                        {
                            startPage = Math.Max(1, endPage - visiblePages + 1);
                        }

                        string searchParam = $"search={search}&";

                        if (startPage > 1)
                        {
                            <li class="page-item">
                                <a class="page-link" href="/Home/Index?@(searchParam)page=1">First</a>
                            </li>
                        }

                        if (currentPage > 1)
                        {
                            <li class="page-item">
                                <a class="page-link" href="/Home/Index?@(searchParam)page=@(currentPage - 1)">Previous</a>
                            </li>
                        }

                        for (int i = startPage; i <= endPage; i++)
                        {
                            if (i == currentPage)
                            {
                                <li class="page-item active">
                                    <span class="page-link">@i</span>
                                </li>
                            }
                            else
                            {
                                <li class="page-item">
                                    <a class="page-link" href="/Home/Index?@(searchParam)page=@i">@i</a>
                                </li>
                            }
                        }

                        if (currentPage < totalPages)
                        {
                            <li class="page-item">
                                <a class="page-link" href="/Home/Index?@(searchParam)page=@(currentPage + 1)">Next</a>
                            </li>
                        }

                        if (endPage < totalPages)
                        {
                            <li class="page-item">
                                <a class="page-link" href="/Home/Index?@(searchParam)page=@totalPages">Last</a>
                            </li>
                        }
                    }
                </ul>
            </nav>
        }
    </div>

@Html.Partial("addStationForm")

<script>
    var map;
    var infoWindow;
    var newLocationMarker;

    function initMap() {
        var options = {
            zoom: 12,
            center: { lat: 60.19193, lng: 24.91967 }
        };

        map = new google.maps.Map(document.getElementById('map'), options);
        infoWindow = new google.maps.InfoWindow();

        // Add markers for existing stations
    @if (Model.AllStations != null && Model.AllStations.Count > 0)
    {
        @foreach (var station in Model.AllStations)
        {
            <text>
                            var lng = parseFloat('@station.X'.replace(',', '.'));
                var lat = parseFloat('@station.Y'.replace(',', '.'));

                if (!isNaN(lat) && !isNaN(lng)) {
                    var marker = new google.maps.Marker({
                        position: { lat: lat, lng: lng },
                        map: map
                    });

                    var content = '<div><h3>' + '@station.Nimi' + '</h3>' +
                        '<p><strong>' + '@station.Namn' + '</strong></p>' +
                        '<p>' + 'Osoite: ' + '@station.Osoite' + '</p>' +
                        '<p>' + 'Kaupunki: ' + '@station.Kaupunki' + '</p>' +
                        '<p>' + 'Operaattori: ' + '@station.Operaattor' + '</p>' +
                        '<p>' + 'Kapasiteetti: ' + '@station.Kapasiteet' + '</p>' +
                        '<p>' + 'Journeys starting: ' + '@station.jrn_from' + '</p>' +
                        '<p>' + 'Journeys ending: ' + '@station.jrn_to' + '</p></div>';

                    addMarkerListener(marker, content);
                }
            </text>
        }
    }

            // Add a right-click event listener to the map
            map.addListener('rightclick', function (event) {
                // Remove the previous newLocationMarker, if exists
                if (newLocationMarker) {
                    newLocationMarker.setMap(null);
                }

                // Get the right-clicked location coordinates
                var clickedLocation = event.latLng;

                // Create the "New Location" marker
                newLocationMarker = new google.maps.Marker({
                    position: clickedLocation,
                    map: map,
                    title: 'New Location',
                    icon: {
                        url: 'https://maps.google.com/mapfiles/ms/icons/green-dot.png',
                        scaledSize: new google.maps.Size(32, 32)
                    }
                });

                // Open the modal when the "New Location" marker is clicked
                newLocationMarker.addListener('click', function () {
                    openAddStationModal(clickedLocation);
                });
            });
    }

    function loadGoogleMaps() {
        var script = document.createElement('script');
        script.src = 'https://maps.googleapis.com/maps/api/js?key=@Model?.Key&callback=initMap';
        document.head.appendChild(script);
    }

    window.addEventListener('load', loadGoogleMaps);

    // Modal functionality
    function openAddStationModal(clickedLocation) {
        document.getElementById('lngInput').value = clickedLocation.lng();
        document.getElementById('latInput').value = clickedLocation.lat();

        var modal = document.getElementById('addStationModal');
        modal.style.display = 'block';

        var closeButton = document.getElementsByClassName('close')[0];
        closeButton.addEventListener('click', function () {
            modal.style.display = 'none';
        });

        window.addEventListener('click', function (event) {
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        });
    }

        // Form submission
        var addStationForm = document.getElementById('addStationForm');
        addStationForm.addEventListener('submit', function (event) {
            event.preventDefault();
            var form = event.target;

            // Replace dot with comma in the coordinates
            var lngInput = document.getElementById('lngInput');
            lngInput.value = lngInput.value.replace('.', ',');

            var latInput = document.getElementById('latInput');
            latInput.value = latInput.value.replace('.', ',');

            var formData = new FormData(form);

            // Perform an AJAX request to submit the form data
            var xhr = new XMLHttpRequest();
            xhr.open('POST', form.action);
            xhr.onload = function () {
                if (xhr.status === 200 && xhr.responseText) {
                    var response = JSON.parse(xhr.responseText);
                    if (response.success) {
                        // Handle the success response
                        // Display the alert message
                        alert('Station added successfully!');
                        // Reload the page
                        location.reload();
                    } else {
                        // Handle the error response
                        // You can display an error message or perform any error handling
                        console.error('Error adding station.');
                    }
                } else {
                    // Handle the error case
                    console.error('Error adding station.');
                }
                // Close the modal after form submission
                var modal = document.getElementById('addStationModal');
                modal.style.display = 'none';
            };
            xhr.onerror = function () {
                // Handle the error case
                console.error('Error adding station.');
                // Close the modal after form submission
                var modal = document.getElementById('addStationModal');
                modal.style.display = 'none';
            };
            xhr.send(formData);
        });


    // Function to add a click event listener to a marker
    function addMarkerListener(marker, content) {
        marker.addListener('click', function () {
            infoWindow.setContent(content);
            infoWindow.open(map, marker);
        });
    }


</script>
</body>
</html>
